(/= 1 2) => не равно

(listp lst) => если список T, иначе Nil

(numberp 1) => Проверка на число
(symbolp 'a) => Проверка на символ

(member elem lst) => Возвращает хвост lst, начиная с элемента == elem (Если такого нет => Nil)

(apply '* '(1 2 3 4)) => 24. Применяет первый аргумент ко второму.
(funcall f arg1 arg2 ... argn) => Аналогична (apply f (arg1 arg2 ... argn))
(funcall '* 1 2 3 4) => 24

(mapcar 'list '(1 2 3)) => ((1) (2) (3))

;; Применяет list сначала ко всем первым элементам списка.
;; Потом ко всем вторым элементам списка.
(mapcar 'list '(1 2 3) '(a b c)) => ((1 A) (2 B) (3 C))
(mapcar (lambda (x) (+ 1 x)) '(1 2 3)) => (2 3 4)

;; (reduce F L A) ≡ (F(...(F(F A e 1 ) e 2 ))...e n )